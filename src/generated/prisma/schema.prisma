// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                       @id @default(cuid())
  walletAddress           String                       @unique
  role                    UserRole                     @default(USER)
  createdAt               DateTime                     @default(now())
  updatedAt               DateTime                     @updatedAt
  tradingHistory          TradingHistory[]
  currentAllocations      CurrentAllocation[]
  currentAssets           CurrentAsset[]
  userStrategyAllocations UserStrategyAllocation[]
  strategyPreferences     UserStrategyPreference[]
  yieldOpportunityOptOuts UserYieldOpportunityOptOut[]
}

model TradingHistory {
  id                 String            @id @default(cuid())
  userId             String
  user               User              @relation(fields: [userId], references: [id])
  action             String // e.g., "BUY", "SELL", "DEPOSIT", "WITHDRAW", "ALLOCATE_TO_STRATEGY", "DEALLOCATE_FROM_STRATEGY", "CLAIM_STRATEGY_YIELD"
  asset              String // e.g., "SOL", "USDC"
  amount             Float
  price              Float? // Optional, as it might not apply to all actions
  strategyTemplateId String? // Optional: Link to the strategy template involved
  strategyTemplate   StrategyTemplate? @relation(fields: [strategyTemplateId], references: [id]) // Optional: Relation to StrategyTemplate
  timestamp          DateTime          @default(now())

  @@index([userId])
  @@index([strategyTemplateId])
}

model CurrentAllocation {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  asset      String // e.g., "SOL", "USDC"
  percentage Float // Represented as 0-100
  updatedAt  DateTime @updatedAt

  @@unique([userId, asset])
  @@index([userId])
}

model CurrentAsset {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  assetName   String // e.g., "Solana", "USD Coin"
  assetTicker String // e.g., "SOL", "USDC"
  balance     Float
  valueUSD    Float? // Optional, if tracking USD value of the asset
  updatedAt   DateTime @updatedAt

  @@unique([userId, assetTicker])
  @@index([userId])
}

model StrategyTemplate {
  id                 String                   @id @default(cuid())
  name               String                   @unique
  description        String?
  image              String?
  assetTicker        String
  riskLevel          RiskLevel
  platform           String?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  userAllocations    UserStrategyAllocation[]
  tradingEvents      TradingHistory[]
  userPreferences    UserStrategyPreference[]
  yieldOpportunities YieldOpportunity[]

  @@index([assetTicker])
}

model UserStrategyAllocation {
  id                      String           @id @default(cuid())
  userId                  String
  user                    User             @relation(fields: [userId], references: [id])
  strategyTemplateId      String
  strategyTemplate        StrategyTemplate @relation(fields: [strategyTemplateId], references: [id])
  assetTicker             String
  allocatedAmount         Float
  entryTimestamp          DateTime         @default(now())
  cumulativeYieldEarned   Float            @default(0)
  lastYieldClaimTimestamp DateTime?
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt

  @@unique([userId, strategyTemplateId, assetTicker])
  @@index([userId])
  @@index([strategyTemplateId])
  @@index([assetTicker])
}

model UserStrategyPreference {
  id                   String           @id @default(cuid())
  userId               String
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategyTemplateId   String
  strategyTemplate     StrategyTemplate @relation(fields: [strategyTemplateId], references: [id], onDelete: Cascade)
  isFavorite           Boolean          @default(false)
  isHidden             Boolean          @default(false)
  receiveNotifications Boolean          @default(false)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  @@unique([userId, strategyTemplateId])
  @@index([userId])
  @@index([strategyTemplateId])
}

model UserYieldOpportunityOptOut {
  id                 String           @id @default(cuid())
  userId             String
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  yieldOpportunityId String
  yieldOpportunity   YieldOpportunity @relation(fields: [yieldOpportunityId], references: [id], onDelete: Cascade)
  optedOutAt         DateTime         @default(now())

  @@unique([userId, yieldOpportunityId])
  @@index([userId])
  @@index([yieldOpportunityId])
}

// Enum for User Roles
enum UserRole {
  USER
  ADMIN
}

enum RiskLevel {
  NORMAL
  AGGRESSIVE
}

model YieldOpportunity {
  id                String                       @id @default(cuid())
  platform          String // e.g., "Kamino JLP Market"
  platformImage     String? // e.g., "kamino.svg"
  tickerImage       String? // e.g., "usdc.svg"
  name              String // e.g., "USDC" (the asset involved in the opportunity)
  marketId          String // The specific market identifier, unique within the platform
  assetTicker       String // The category, e.g., "USD", "Solana"
  apy               Float
  createdAt         DateTime                     @default(now())
  updatedAt         DateTime                     @updatedAt
  userOptOuts       UserYieldOpportunityOptOut[]
  strategyTemplates StrategyTemplate[]

  @@unique([platform, marketId])
  @@index([platform])
  @@index([assetTicker])
}
